#!/usr/bin/env ruby
require 'httparty'
require 'multi_json'

class FitbitAccount
  include HTTParty
  @@base_uri = 'api.fitbit.com/1/user'

  def initialize()
    @access_token = `echo -n $FB_ACCESS_TOKEN`
    @user_id = `echo -n $FB_USER_ID`

    if @access_token == "" && @user_id == ""
      puts "We need some information. It will be saved"
      print "Copy your Access Token: "
      @access_token = gets.chomp

      print "Copy your User ID: "
      @user_id = gets.chomp

      system( "clear" ) # Clears Screen
      # system( "echo \"export FB_ACCESS_TOKEN=#{@access_token}\" >> ~/.bashrc")
      @authorization_header = {"Authorization" => "Bearer #{@access_token}"}
    end
  end

  def steps
    @response = self.class.get("https://#{@@base_uri}/#{@user_id}/activities/steps/date/today/1d/1min.json",
      :headers => {"Authorization" => "Bearer #{@access_token}"})
    @parsed_response = MultiJson.load(@response.body)
    @parsed_response = @parsed_response["activities-steps"][0]["value"].to_i
  end

  def floors
    @response = self.class.get("https://#{@@base_uri}/#{@user_id}/activities/floors/date/today/1d/1min.json",
      :headers => {"Authorization" => "Bearer #{@access_token}"})
    @parsed_response = MultiJson.load(@response.body)
    @parsed_response = @parsed_response["activities-floors"][0]["value"].to_i
  end

  def cals_out
    @response = self.class.get("https://#{@@base_uri}/#{@user_id}/activities/calories/date/today/1d/1min.json",
      :headers => {"Authorization" => "Bearer #{@access_token}"})
    @parsed_response = MultiJson.load(@response.body)
    @parsed_response = @parsed_response["activities-calories"][0]["value"].to_i
  end

  def distance
    @response = self.class.get("https://#{@@base_uri}/#{@user_id}/activities/distance/date/today/1d/1min.json",
      :headers => {"Authorization" => "Bearer #{@access_token}"})
    @parsed_response = MultiJson.load(@response.body)
    @parsed_response = @parsed_response["activities-distance"][0]["value"]
  end

  def full_report
    # Full Report
    puts "Full Report:\n-------"
    puts "#{self.steps} steps"
    puts "#{self.distance} miles"
    puts "#{self.floors} stairs climbed"
    puts "#{self.cals_out} calories burned"
  end

  def hello
    return "Hello, World!"
  end

  def help
    puts "NAME"
    puts "    fitgem - A simple Fitbit CLI\n"
    puts "SYNOPSIS"
    puts "    fitgem SHORT-OPTION"
    puts "    fitgem LONG-OPTION\n"
    puts "DESCRIPTION"
    puts "    steps (s) -- Output steps"
    puts "    distance (d) -- Output distance (miles)"
    puts "    floors (f) -- Output climbed floors"
    puts "    calories (c) -- Output calories burned"
    puts "    all (a) -- Output a full report"
    puts "    full -- Same as all or a"
    puts "    help (?) -- Output this help. Same as leaving blank\n"
    puts "BUGS"
    puts "    Please report any bugs to the bug tracker on Github at http://github.com/juniorRubyist/fitgem."
    puts "\nLICENSE"
    puts "    This software is released under the MIT License.\n"
    puts "AUTHOR"
    puts "    Joseph Geis <geis28@gmail.com> (see files AUTHORS for details)."
  end
end

fitgem = FitbitAccount.new()
exit_var = false
travis_ci = `echo -n $TRAVIS_CI`
# Main menu
while !exit_var
  if travis_ci == "true"
    `clear`
    puts "Notice: Travis CI detected\n"
    puts "===Full Report==="
    fitgem.full_report
    puts "===Steps==="
    puts fitgem.steps
    puts "===Floors==="
    puts fitgem.floors
    puts "===Distance==="
    puts fitgem.distance
    puts "===Calories==="
    puts fitgem.cals_out
    exit_var = true
  else
    puts "Choose what to do:\n-------"
    puts "a -- give me full report (steps, calories, floors [if available], and distance)"
    puts "s -- give me steps report"
    puts "d -- give me distance report"
    puts "f -- give me floors report (if availiable)"
    puts "c -- give me calories burned report"
    puts "x -- exit Fitgem"
    choice = gets.chomp
  end
  system( "clear" )
  case choice
    when "a"
      fitgem.full_report
    when "s"
      # Step Count
      puts "Today's Step Count: #{fitgem.steps}"
    when "d"
      puts "Today's Distance: #{fitgem.distance} mi."
    when "f"
      puts "Floors Climbed: #{fitgem.floors}"
    when "c"
      puts "Calories Burned: #{fitgem.cals_out}"
    # when "o"
    #  opt_exit = !false
    #  while opt_exit
    #    puts "Change Options:\n-------"
    #    puts "a -- give me full report (steps, calories, floors [if available], and distance)"
    #    puts "s -- give me steps report"
    #    puts "d -- give me distance report"
    #    puts "f -- give me floors report (if availiable)"
    #    puts "c -- give me calories burned report"
    #    puts "o -- options"
    #    puts "x -- exit Fitgem"
    #    choice = gets.chomp
    #  end
    when "x"
      exit_var = true
    else
      puts "Try Again! Not a command"
  end

choice = ARGV[0]
case choice
when 'steps', 's'
  puts fitgem.steps
when 'distance', 'd'
  puts fitgem.distance
when 'floors', 'f'
  puts fitgem.floors
when 'calories', 'c'
  puts calories
when 'full', 'all', 'a'
  fitgem.full_report
when 'help', 'h', '?'
  fitgem.help
else
  fitgem.help
end
